// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CounterIncremented extends ethereum.Event {
  get params(): CounterIncremented__Params {
    return new CounterIncremented__Params(this);
  }
}

export class CounterIncremented__Params {
  _event: CounterIncremented;

  constructor(event: CounterIncremented) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newCount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Counter extends ethereum.SmartContract {
  static bind(address: Address): Counter {
    return new Counter("Counter", address);
  }

  getCounter(user: Address): BigInt {
    let result = super.call("getCounter", "getCounter(address):(uint256)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBigInt();
  }

  try_getCounter(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getCounter", "getCounter(address):(uint256)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserCount(): BigInt {
    let result = super.call("getUserCount", "getUserCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getUserCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getUserCount", "getUserCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserAt(index: BigInt): Address {
    let result = super.call("getUserAt", "getUserAt(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);

    return result[0].toAddress();
  }

  try_getUserAt(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getUserAt", "getUserAt(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  counters(param0: Address): BigInt {
    let result = super.call("counters", "counters(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_counters(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("counters", "counters(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasInteracted(param0: Address): boolean {
    let result = super.call("hasInteracted", "hasInteracted(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_hasInteracted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasInteracted",
      "hasInteracted(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  users(param0: BigInt): Address {
    let result = super.call("users", "users(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_users(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("users", "users(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class IncrementCall extends ethereum.Call {
  get inputs(): IncrementCall__Inputs {
    return new IncrementCall__Inputs(this);
  }

  get outputs(): IncrementCall__Outputs {
    return new IncrementCall__Outputs(this);
  }
}

export class IncrementCall__Inputs {
  _call: IncrementCall;

  constructor(call: IncrementCall) {
    this._call = call;
  }
}

export class IncrementCall__Outputs {
  _call: IncrementCall;

  constructor(call: IncrementCall) {
    this._call = call;
  }
}
